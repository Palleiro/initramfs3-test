#!/sbin/busybox sh
cd /;

busybox mount -t proc proc /proc;
busybox mount -t sysfs sysfs /sys;

# set "/" rw
/sbin/busybox mount -t rootfs -o remount,rw rootfs;

if grep -q bootmode=2 /proc/cmdline; then
	# recovery mode
	echo "0" > /proc/sys/kernel/rom_feature_set;
	cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	cp -a /recovery.rc /init.rc;
	exec /sbin/init.recovery;
fi;

if busybox grep -q 1 /sys/class/power_supply/battery/batt_lp_charging; then
	# low power mode
	echo "0" > /proc/sys/kernel/rom_feature_set;
	cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	cp -a lpm.rc init.rc;
	rm init.smdk4210.rc;
	exec /sbin/init.recovery;
fi;

# cleaning and rebuilding the /mnt and sdcards mounts folders
rm -rf /mnt;
rm -rf /sdcard;
rm -rf /emmc;
rm -rf /storage;
rm -rf /vendor;
rm -rf /tmp/*;
mkdir -p /dev/block;
mkdir /dev/input;
mkdir /dev/graphics;
mkdir -p /mnt/asec;
mkdir -p /mnt/.lfs;
mkdir -p /mnt/obb;
mkdir -p /mnt/secure;
mkdir -p /mnt/tmp;
mkdir -p /mnt/.secondrom;
chmod -R 777 /mnt/;
mkdir /preload;
mkdir /storage;
chmod -R 777 /storage;
mknod /dev/graphics/fb0 c 29 0
mknod /dev/input/event1 c 13 65
mknod /dev/input/event2 c 13 66
mknod /dev/input/event8 c 13 72
mknod /dev/input/event9 c 13 73
mknod /dev/ashmem c 10 61
mknod /dev/block/mmcblk0p7 b 179 7
mknod /dev/block/mmcblk0p9 b 259 1
mknod /dev/block/mmcblk0p10 b 259 2
mknod /dev/block/mmcblk0p11 b 259 3
mknod /dev/block/mmcblk0p12 b 259 4
mknod /dev/block/loop0 b 7 0

# dual boot check and run
mount -t ext4 -o rw /dev/block/mmcblk0p12 /preload;
mount -t vfat /dev/block/mmcblk1p1 /mnt/tmp && ( mkdir -p /mnt/tmp/clockworkmod/blobs/ ) && ( touch /mnt/tmp/clockworkmod/.nomedia ) && ( touch /mnt/tmp/clockworkmod/blobs/.nomedia );
sync;
umount -l /mnt/tmp;
mount -t vfat /dev/block/mmcblk0p11 /mnt/tmp && ( mkdir -p /mnt/tmp/clockworkmod/blobs/ ) && ( touch /mnt/tmp/clockworkmod/.nomedia ) && ( touch /mnt/tmp/clockworkmod/blobs/.nomedia );

if [ -e /mnt/tmp/.nextboot ]; then
	NEXTBOOT=`cat /mnt/tmp/.nextboot`;
	rm -f /mnt/tmp/.nextboot;
fi;
if [ -e /mnt/tmp/.defaultrom ]; then
	DEFAULTROM=`cat /mnt/tmp/.defaultrom`;
fi;
SECONDROM=1;
NOBOOTLOGO=0;
[ -f /preload/build.prop ] || SECONDROM=0;
[ -f /mnt/tmp/.secondrom/data.img ] || SECONDROM=0;
[ -f /mnt/tmp/.secondrom/cache.img ] || SECONDROM=0;
[ -f /mnt/tmp/.nobootlogo ] && NOBOOTLOGO=1;
sync;
umount /preload;
umount -l /mnt/tmp;

if [ "$SECONDROM" == "0" ]; then
	if [ "$NOBOOTLOGO" == "0" ]; then
		/sbin/choose_rom 0;
	fi;
else
	if [ "$NEXTBOOT" == "1" ]; then
		SECONDROM=0;
	elif [ "$NEXTBOOT" == "2" ]; then
		SECONDROM=1;
	else
		if [ "$NOBOOTLOGO" == "1" ]; then
			SECONDROM=$DEFAULTROM;

		elif [ "$DEFAULTROM" == "1" ]; then
			/sbin/choose_rom $SECONDROM;

			if [ "$?" == "1" ]; then
				SECONDROM=0;
			else
				SECONDROM=1;
			fi;
		else
			/sbin/choose_rom $SECONDROM;

			if [ "$?" == "1" ]; then
				SECONDROM=1;
			else
				SECONDROM=0;
			fi;
		fi;
	fi;
fi;

if [ "$SECONDROM" == "1" ]; then
	rm -rf /res/dev;
	mkdir -p /res/dev;
	ln -s /mnt/.secondrom/.secondrom/data.img /res/dev/data;
	ln -s /dev/block/mmcblk0p12 /res/dev/system;
	ln -s /mnt/.secondrom/.secondrom/cache.img /res/dev/cache;
else
	rm -rf /res/dev;
	mkdir -p /res/dev;
	ln -s /dev/block/mmcblk0p10 /res/dev/data;
	ln -s /dev/block/mmcblk0p9 /res/dev/system;
	ln -s /dev/block/mmcblk0p7 /res/dev/cache;
fi;

# mounting system!
/sbin/busybox mount -t ext4 /res/dev/system /system;

# linking /system/bin to /bin for crond
ln -s /system/bin/ /bin

# adding latest vendor binary from 3.6.RC6 kernel for all! tested working great
mkdir -p /system/vendor/firmware;
cp -a /res/misc/vendor/firmware/mfc_fw.bin /system/vendor/firmware/mfc_fw.bin;
chmod 755 /system/vendor/firmware/mfc_fw.bin;

# fix permission to services.jar in case user did a mess, after using my MOD!
chmod 644 /system/framework/services.jar;

# copy new Kernel modules to /system/lib/modules and to second rom system if exist
if [ ! -d /system/lib/modules ]; then
	mkdir /system/lib/modules;
	chmod 755 /system/lib/modules/;
fi;
rm -f /system/lib/modules/*.ko;
cp /lib/modules/*.ko /system/lib/modules/;
chmod 755 /system/lib/modules/*.ko;

mount -o remount,rw /preload;
if [ -d /preload/lib/ ]; then
	if [ ! -d /preload/lib/modules ]; then
		mkdir /preload/lib/modules;
		chmod 755 /preload/lib/modules;
	fi;
	rm -f /preload/lib/modules/*.ko;
	cp /lib/modules/*.ko /preload/lib/modules/;
	chmod 755 /preload/lib/modules/*.ko;
fi;

if [ -f /system/recovery.cpio.gz ]; then
	/sbin/busybox mount -o remount,rw /;
	/sbin/busybox zcat /system/recovery.cpio.gz | cpio -idmu;
fi;

AOSP=0;
MIUI=0;
MIUI_JB=0;
B2G=0;
JELLY=0;
CM10=0;
S4A=0;

[ -d /system/b2g ] && B2G=1;
[ -f /system/framework/framework-miui.jar ] && MIUI=1;
[ -f /system/framework/miui-framework.jar ] && MIUI=1;
[ "`/sbin/busybox grep -i cMIUI /system/build.prop`" ] && MIUI_JB=1;
[ -f /system/lib/ssl/engines/libkeystore.so ] && JELLY=1;
[ -f /system/framework/seccamera.jar ] || CM10=1;
[ -f /system/framework/framework2.jar ] || AOSP=1;
[ "`/sbin/busybox grep -i android-htc-rev /system/build.prop`" ] && S4A=1;
[ "`/sbin/busybox grep -i Slim /system/build.prop`" ] && AOSP=1;

# one more time set "/" rw just for good sleep
/sbin/busybox mount -t rootfs -o remount,rw rootfs;

#############################
# Partition global tuning!
#############################

PARTITION_TUNING()
{
	DEVICE_DATA="/res/dev/data";
	DIR_DATA="/data";
	LOG_DATA="/log-data";
	LOG_DATA_TMP="/log-data-tmp";

	DEVICE_CACHE="/res/dev/cache";
	DIR_CACHE="/cache";
	LOG_CACHE="/log-cache";
	LOG_CACHE_TMP="/log-cache-tmp";

	# new empty log
	/sbin/busybox sh -c "/sbin/date" > $LOG_DATA;
	/sbin/busybox sh -c "/sbin/date" > $LOG_CACHE;

	# umount 
	umount -l $DIR_DATA >> $LOG_DATA 2>&1;
	umount -l $DIR_CACHE >> $LOG_CACHE 2>&1;

	# set fs-feature -> [^]has_journal
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'features' | grep 'has_journal'" > $LOG_CACHE_TMP;
	if [ "a`cat $LOG_CACHE_TMP`" == "a" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -O has_journal $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
	fi;
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'features' | grep 'has_journal'" > $LOG_DATA_TMP;
	if [ "a`cat $LOG_DATA_TMP`" == "a" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -O has_journal $DEVICE_DATA" >> $LOG_DATA 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_DATA" >> $LOG_DATA 2>&1;
	fi;

	# set fs-feature -> [^]dir_index
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'features' | grep 'dir_index'" > $LOG_CACHE_TMP;
	if [ "a`cat $LOG_CACHE_TMP`" == "a" ]; then	
		/sbin/busybox sh -c "/sbin/tune2fs -O dir_index $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
	fi;
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'features' | grep 'dir_index'" > $LOG_DATA_TMP;
	if [ "a`cat $LOG_DATA_TMP`" == "a" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -O dir_index $DEVICE_DATA" >> $LOG_DATA 2>&1;
	fi;

	# set mount option -> [^]journal_data_ordered
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'Default mount options' | grep 'journal_data_ordered'" > $LOG_CACHE_TMP;
	if [ "a`cat $LOG_CACHE_TMP`" == "a" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -o journal_data_ordered $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
	fi;
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'Default mount options' | grep 'journal_data_ordered'" > $LOG_DATA_TMP;
	if [ "a`cat $LOG_DATA_TMP`" == "a" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -o journal_data_ordered $DEVICE_DATA" >> $LOG_DATA 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_DATA" >> $LOG_DATA 2>&1;
	fi;

	# set inode to 256
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'Inode size' | grep '256'" > $LOG_CACHE_TMP;
	if [ "a`cat $LOG_CACHE_TMP`" == "a" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -I 256 $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
	fi;
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'Inode size' | grep '256'" > $LOG_DATA_TMP;
	if [ "a`cat $LOG_DATA_TMP`" == "a" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -I 256 $DEVICE_DATA" >> $LOG_DATA 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_DATA" >> $LOG_DATA 2>&1;
	fi;

	# only if asked by user via stweaks
	if [ -e /system/run_fs_check ]; then
		# reset the lock-file
		rm -f /system/run_fs_check

		# check cache
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
		/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'Filesystem state' | grep 'clean'" > $LOG_CACHE_TMP;
		if [ "a`cat $LOG_CACHE_TMP`" == "a" ]; then
			/sbin/busybox sh -c "/sbin/e2fsck -fyc $DEVICE_CACHE" >> $LOG_CACHE 2>&1;
		else
			echo "CACHE: $LOG_CACHE_TMP" >> $LOG_CACHE 2>&1;
		fi;

		# check data
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_DATA >> $LOG_DATA 2>&1";
		/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'Filesystem state' | grep 'clean'" > $LOG_DATA_TMP;
		if [ "a`cat $LOG_DATA_TMP`" == "a" ]; then
			/sbin/busybox sh -c "/sbin/e2fsck -fyc $DEVICE_DATA" >> $LOG_DATA 2>&1;
		else
			echo "DATA: $LOG_DATA_TMP" >> $LOG_DATA 2>&1;
		fi;
	fi;
}

USER_ACTIONS()
{
	# data mount
	/sbin/busybox mount -t ext4 /res/dev/data /data;

	if [ "$JELLY" == "1" ] || [ "$MIUI_JB" == "1" ]; then
		echo "JB-INSTALLED" > /data/.siyah/jb-installed; # used and terminated at /sbin/ext/partition_tune.sh
		stop adbd;
		cp -a /sbin/adbd.jb /sbin/adbd;
		chmod 755 /sbin/adbd;
		start adbd;
	else
		start adbd;
	fi;

	# only if asked by user via stweaks
	if [ -e /system/run_fix_media ]; then
		mkdir /sdcardtmp;
		chmod 777 /sdcardtmp;
		mount -t vfat /dev/block/mmcblk0p11 /sdcardtmp;
		rm -f /system/run_fix_media;

		if [ -e /sdcard/Android/data/ ]; then
			rm -rf /sdcardtmp/Android/data/com.cooliris.media;
			rm -rf /sdcardtmp/Android/data/com.android.gallery3d;
			rm -rf /sdcardtmp/Android/data/com.google.android.gallery3d;
			rm -rf /sdcardtmp/Android/data/com.android.providers.media;
			rm -rf /sdcardtmp/Android/data/com.google.android.music;
			rm -rf /data/data/com.android.providers.media/databases/*;
		fi;
		# sdcard unmount
		sync;
		umount -l /sdcardtmp;
		if [ `du -h /sdcardtmp | grep 4 | cut -c1-4` == 4.0K ]; then
			rm -rf /sdcardtmp;
		fi;
	fi;

	# data unmount
	sync;
	umount -l /data;
}

# network tuning reset to allow real ROM control over H/H+/3G/G signal.
sed -i "s/ro.ril.hsxpa=[0-9]*//g" /system/build.prop;
sed -i "s/ro.ril.gprsclass=[0-9]*//g" /system/build.prop;

# system dalvik.vm tuning.
if [ "`getprop dalvik.vm.heapsize | sed 's/m//g'`" -lt 120 ]; then
	setprop dalvik.vm.heapsize 128m
	sed -i "s/dalvik.vm.heapsize=[0-9\a-z\]*/dalvik.vm.heapsize=128m/g" /system/build.prop;
fi;

if [ "`getprop dalvik.vm.heapstartsize | sed 's/m//g'`" -lt 16 ]; then
	setprop dalvik.vm.heapstartsize 16m
	sed -i "s/dalvik.vm.heapstartsize=[0-9\a-z\]*/dalvik.vm.heapstartsize=16m/g" /system/build.prop;
fi;

if [ "`getprop dalvik.vm.heapgrowthlimit | sed 's/m//g'`" -lt 120 ]; then
	setprop dalvik.vm.heapgrowthlimit 128m
	sed -i "s/dalvik.vm.heapgrowthlimit=[0-9\a-z\]*/dalvik.vm.heapgrowthlimit=128m/g" /system/build.prop;
fi;

# we can OC to 1.5Ghz.
sed -i "s/ro.device.cpu=Dual-core 1.2GHz ARM Cortex-A9/ro.device.cpu=Dual-core 1.5GHz ARM Cortex-A9/g" /system/build.prop;

######################################
# Loading Modules
######################################
chmod -R 755 /lib;

# cpu undervolting interfaces
if [ -e /lib/modules/cpu_undervolting.ko ]; then
	insmod /lib/modules/cpu_undervolting.ko;
fi;

# mali (gpu) interfaces
if [ -e /lib/modules/mali_control.ko ]; then
	insmod /lib/modules/mali_control.ko;
fi;

# FM radio
Si4709="/lib/modules/Si4709_driver.ko";
if [ -e $Si4709 ]; then
	insmod $Si4709;
fi;

# load CIFS with all that needed
CIFS="/lib/modules/cifs.ko";
if [ -e $CIFS ]; then
	insmod $CIFS;
fi;

# for NFS automounting
FUSE="/lib/modules/fuse.ko";
if [ -e $FUSE ]; then
	insmod $FUSE;
fi;

# load serial modules for console cable usage.
SERIAL_MODULE="/lib/modules/usbserial.ko";
if [ -e $SERIAL_MODULE ]; then
	insmod $SERIAL_MODULE;
fi;

CONSOLE_MODULE="/lib/modules/pl2303.ko";
if [ -e $CONSOLE_MODULE ]; then
	insmod $CONSOLE_MODULE;
fi;

######################################
# Starting ROM choose and INIT config.
######################################

if [ "$S4A" == "1" ]; then
	echo "0" > /proc/sys/kernel/rom_feature_set;
	mv /res/misc/Sense4All-ROM/init.s4a /init.rc;
	mv /res/misc/Sense4All-ROM/init.s4a.2 /init.rc.2;

	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		mv /init.rc.2 /init.rc;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	USER_ACTIONS;
	exec /sbin/init.samsung;
fi;

if [ "$B2G" == "1" ]; then
	echo "0" > /proc/sys/kernel/rom_feature_set;
	cp -a /res/misc/B2G-ROM/* /;

	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		mv /init.rc.2 /init.rc;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	USER_ACTIONS;
	exec /sbin/init.samsung;
fi;

if [ "$JELLY" == "1" ] || [ "$MIUI_JB" == "1" ]; then
	# Injecting JB Modded by VOKU, SUPER libsqlite!
	cp -a /res/misc/sql/jb/libsqlite.so /system/lib/libsqlite.so;
	cp -a /res/misc/sql/jb/sqlite3 /system/xbin/sqlite3;
	chmod 755 /system/lib/libsqlite.so;
	chmod 755 /system/xbin/sqlite3;

	echo "3" > /proc/sys/kernel/rom_feature_set;
	cp -a /res/misc/JellyB-CM-AOKP/* /;

	if [ "$SECONDROM" == "1" ]; then
		if [ -e /init.smdk4210.rc.2 ]; then
			mv /init.smdk4210.rc.2 /init.smdk4210.rc;
			rm -f /init.rc.2;
		else
			rm -f /init.smdk4210.rc.2;
			rm -f /init.rc.2;
		fi;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	USER_ACTIONS;
	exec /sbin/init.samsung;
fi;

if [ "$AOSP" == "1" ]; then
	cp -a /res/misc/CM-ROM/* /;
	# Injecting ICS Modded by Dorimanx, SUPER libsqlite!
	cp -a /res/misc/sql/ics/libsqlite.so /system/lib/libsqlite.so;
	chmod 755 /system/lib/libsqlite.so;
	echo "1" > /proc/sys/kernel/rom_feature_set;

	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		rm -f /init.rc.2;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	USER_ACTIONS;
	exec /sbin/init.samsung;
fi;

# If not detected ROM / SAMMY ROM installed, then:
echo "0" > /proc/sys/kernel/rom_feature_set;

if [ "$SECONDROM" == "1" ]; then
	mv /init.smdk4210.rc.2 /init.smdk4210.rc;
	mv /init.rc.2 /init.rc;
else
	rm -f /init.smdk4210.rc.2;
	rm -f /init.rc.2;
fi;

# Start ROM
PARTITION_TUNING;
USER_ACTIONS;
exec /sbin/init.samsung;

